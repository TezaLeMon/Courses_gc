// 1752762 计1班 魏鹳达
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <stdlib.h>		//malloc/realloc函数

/* P.10 的预定义常量和类型 */
#define TRUE		1
#define FALSE		0
#define OK		1
#define ERROR		0
#define INFEASIBLE	-1
#define OVERFLOW	-2

typedef int Status;

typedef int ElemType;	//可根据需要修改元素的类型

typedef struct LNode {
	ElemType      data;	//存放数据
	struct LNode *next;	//存放直接后继的指针
} LNode, *LinkList;

Status InitList(LinkList *L)
{
	/* 申请头结点空间，赋值给头指针 */
	*L = (LNode *)malloc(sizeof(LNode));
	if (*L == NULL)
		exit(OVERFLOW);

	(*L)->next = (*L);	//头结点的next指向自己
	return OK;
}

/* 删除线性表 */
Status DestroyList(LinkList *L)
{
	LinkList q, p = *L; //指向首元

	/* 整个链表(含头结点)依次释放
	   不能用while循环 */
	do {
		q = p->next; //抓住链表的下一个结点，若空表则q直接为NULL
		free(p);
		p = q;
	} while (p != (*L));   //若链表为空，则循环不执行

	(*L) = NULL;	//头结点的next置NULL
	return OK;
}

/* 清除线性表（保留头结点） */
Status ClearList(LinkList *L)
{
	LinkList q, p = (*L)->next;  //p指向首元

	/* 从首元结点开始依次释放(如果空表则while不执行) */
	while (p != (*L)) {
		q = p->next;   //抓住链表的下一个结点
		free(p);
		p = q;
	}

	(*L)->next = (*L); //头结点的next域置L
	return OK;
}

/* 判断是否为空表 */
Status ListEmpty(LinkList L)
{
	/* 判断头结点的next域即可 */
	if (L->next == L)
		return TRUE;
	else
		return FALSE;
}

/* 求表的长度 */
int ListLength(LinkList L)
{
	LinkList p = L->next; //指向首元结点
	int len = 0;

	/* 循环整个链表，进行计数 */
	while (p != L) {
		p = p->next;
		len++;
	}

	return len;
}

/* 取表中元素 */
Status GetElem(LinkList L, int i, ElemType *e)
{
	LinkList p = L->next;	//指向首元结点
	int    pos = 1;		//初始位置为1

	/* 链表不为NULL 且 未到第i个元素 */
	while (p != L && pos < i) {
		p = p->next;
		pos++;
	}

	if (p == L || pos > i)
		return ERROR;

	*e = p->data;
	return OK;
}

/* 在指定位置前插入一个新元素 */
Status ListInsert(LinkList *L, int i, ElemType e)
{
	LinkList s, p = *L;	//p指向头结点
	int      pos = 0;

	if (i == 1)
		goto INSERT;

	/* 寻找第i-1个结点 */
	do {
		p = p->next;
		pos++;
	} while (p != (*L) && pos < i - 1);

	if (p == (*L) || pos > i - 1)  //i值非法则返回
		return ERROR;

	//执行到此表示找到指定位置，p指向第i-1个结点
INSERT:
	s = (LinkList)malloc(sizeof(LNode));
	if (s == NULL)
		return OVERFLOW;

	s->data = e; 	//新结点数据域赋值
	s->next = p->next;	//新结点的next是第i个
	p->next = s;	//第i-1个的next是新结点

	return OK;
}

/* 删除指定位置的元素，并将被删除元素的值放入e中返回 */
Status ListDelete(LinkList *L, int i, ElemType *e)
{
	LinkList q, p = *L;	//p指向头结点
	int      pos = 0;

	/* 寻找第i个结点（p->next是第i个结点） */
	while (p->next != (*L) && pos < i - 1) {
		p = p->next;
		pos++;
	}

	if (p->next == (*L) || pos > i - 1)	//i值非法则返回
		return ERROR;

	//执行到此表示找到了第i个结点，此时p指向第i-1个结点

	q = p->next;       //q指向第i个结点
	p->next = q->next; //第i-1个结点的next域指向第i+1个

	*e = q->data;      //取第i个结点的值
	free(q);           //释放第i个结点

	return OK;
}

/* 遍历线性表 */
Status ListTraverse(LinkList L, Status(*visit)(ElemType e))
{
	extern int line_count; //在main中定义的打印换行计数器（与算法无关）
	LinkList p = L->next;

	line_count = 0;		//计数器恢复初始值（与算法无关）
	while (p != L && (*visit)(p->data) == TRUE)
		p = p->next;

	if (p != L)
		return ERROR;

	printf("\n");//最后打印一个换行，只是为了好看，与算法无关
	return OK;
}


int line_count = 0;   //打印链表时的计数器

#define MAX_NUM_PER_LINE 	10		//每行最多输出的元素个数

/* 用于访问某个元素的值的具体函数，与ListTraverse中的函数指针定义相同，调用时代入
   Status ListTraverse(sqlist L, Status (*visit)(ElemType e)) */
Status MyVisit(ElemType e)
{
	printf("%3d->", e);

	/* 每输出MAX_NUM_PER_LINE个，打印一个换行 */
	if ((++line_count) % MAX_NUM_PER_LINE == 0)
		printf("\n");

	return OK;
}

int main()
{
	LinkList L;
	ElemType e1 = 0;
	int      i;
	int n, m, k;

	InitList(&L);

	printf("约瑟夫环\n输入总人数n：\n");
	scanf("%d", &n);
	printf("从编号k开始：\n");
	scanf("%d", &k);
	printf("数到m出列：\n");
	scanf("%d", &m);

	for (i = n; i > 0; i--)
		ListInsert(&L, 1, i);
	ListTraverse(L, MyVisit);	//此处传入MyVisit函数名

	int out, len;
	printf("出列顺序：");
	line_count = 0;
	for (i = k; ListLength(L);) {
		len = ListLength(L);
		i %= len;
		if (i == 0)
			i = len;
		out = i + m;
		out %= len;
		if (out == 0)
			out = len;
		i = out;

		printf("%3d", out);
		if ((++line_count) % MAX_NUM_PER_LINE == 0)
			printf("\n");
		ListDelete(&L, out, &e1);
	}

	DestroyList(&L);

	return 0;
}